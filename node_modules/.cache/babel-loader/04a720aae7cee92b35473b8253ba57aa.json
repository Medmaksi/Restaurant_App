{"ast":null,"code":"var _jsxFileName = \"/Users/medmaksi/restaurantx/src/screens/ListScreen.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { gql, useQuery } from '@apollo/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useHistory } from \"react-router-dom\";\nimport { Card, Button, Accordion, Nav, Navbar } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_RESTAURANTS = gql`\nquery{\n  restaurants(index: 0, limit: 100, delivery: false){\n\n    minOrderAmount\n    name\n    open\n    restaurantAddressSlugCityName\n  \n    slugName\n    \n    uid\n  }\n}\n`;\n\nconst ListScreen = () => {\n  _s();\n\n  const {\n    loading,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  const history = useHistory();\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"dark\",\n      variant: \"dark\",\n      children: [/*#__PURE__*/_jsxDEV(Nav.Link, {\n        style: {\n          color: 'white'\n        },\n        href: \"/list\",\n        children: \"Restaurant List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Nav.Link, {\n        style: {\n          color: 'white'\n        },\n        href: \"/orders\",\n        children: \"Orders List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Nav.Link, {\n        style: {\n          color: 'white'\n        },\n        href: \"/profile\",\n        children: \"Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n      className: \"restaurantsContainer\",\n      children: data.restaurants.map(restaurant => /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: /*#__PURE__*/_jsxDEV(Accordion.Toggle, {\n              style: {\n                width: '100%',\n                display: 'flex',\n                justifyContent: 'space-between'\n              },\n              as: Button,\n              variant: \"link\",\n              eventKey: restaurant.slugName,\n              children: [restaurant.name, /*#__PURE__*/_jsxDEV(\"span\", {\n                children: restaurant.open ? 'Open' : 'Closed'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 32\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(Accordion.Collapse, {\n            eventKey: restaurant.slugName,\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Based in: \", restaurant.restaurantAddressSlugCityName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 36\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Min Order: \", restaurant.minOrderAmount, \" $\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 32\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 24\n        }, this)\n      }, restaurant.slugName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 20\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        history.push({\n          pathname: '/orders'\n        });\n      },\n      variant: \"dark\",\n      size: \"lg\",\n      block: true,\n      children: \"Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 8\n  }, this);\n};\n\n_s(ListScreen, \"PVkbzpfhkzd6SdQE9k4hNOkXQIc=\", false, function () {\n  return [useQuery, useHistory];\n});\n\n_c = ListScreen;\nexport default ListScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListScreen\");","map":{"version":3,"sources":["/Users/medmaksi/restaurantx/src/screens/ListScreen.js"],"names":["React","gql","useQuery","useHistory","Card","Button","Accordion","Nav","Navbar","GET_RESTAURANTS","ListScreen","loading","data","history","console","log","color","restaurants","map","restaurant","width","display","justifyContent","slugName","name","open","restaurantAddressSlugCityName","minOrderAmount","push","pathname"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { gql, useQuery } from '@apollo/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {useHistory} from \"react-router-dom\";\nimport {Card, Button, Accordion, Nav, Navbar} from 'react-bootstrap';\n\nconst GET_RESTAURANTS = gql`\nquery{\n  restaurants(index: 0, limit: 100, delivery: false){\n\n    minOrderAmount\n    name\n    open\n    restaurantAddressSlugCityName\n  \n    slugName\n    \n    uid\n  }\n}\n`;\n\nconst ListScreen = () => {\n\n    const { loading, data } = useQuery(GET_RESTAURANTS);\n    const history = useHistory();\n    if(loading) {\n        return(\n            <p>Loading...</p>\n        )\n    }\n    console.log(data);\n    return(\n       <div>\n           <Navbar bg=\"dark\" variant=\"dark\">\n                   <Nav.Link style={{color: 'white'}} href=\"/list\">Restaurant List</Nav.Link>\n                   <Nav.Link style={{color: 'white'}} href=\"/orders\">Orders List</Nav.Link>\n                   <Nav.Link style={{color: 'white'}} href=\"/profile\">Profile</Nav.Link>\n           </Navbar>\n           <Accordion className=\"restaurantsContainer\">\n               {data.restaurants.map((restaurant) => (\n                   <Card key={restaurant.slugName}>\n                       <Card.Body>\n                           <Card.Header>\n                               <Accordion.Toggle style={{width: '100%', display: 'flex', justifyContent: 'space-between'}} as={Button} variant=\"link\" eventKey={restaurant.slugName}>\n                                   {restaurant.name}\n                                   <span>{restaurant.open ? 'Open' : 'Closed'}</span>\n                               </Accordion.Toggle>\n                           </Card.Header>\n                           <Accordion.Collapse eventKey={restaurant.slugName}>\n                               <Card.Body>\n                                   <p>Based in: {restaurant.restaurantAddressSlugCityName}</p>\n                                   <p>Min Order: {restaurant.minOrderAmount} $</p>\n                               </Card.Body>\n                           </Accordion.Collapse>\n                       </Card.Body>\n                   </Card>\n               ))}\n           </Accordion>\n           <Button onClick={() => {\n               history.push({\n                   pathname: '/orders',\n               })\n           }} variant=\"dark\" size=\"lg\" block>\n               Orders\n           </Button>\n       </div>\n    )\n}\n\nexport default ListScreen;"]},"metadata":{},"sourceType":"module"}