{"ast":null,"code":"var _jsxFileName = \"/Users/medmaksi/Restaurant_App/src/screens/OrdersScreen.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { gql, useQuery } from '@apollo/client';\nimport { ListGroup, Accordion, Button } from \"react-bootstrap\";\nimport NavBar from \"../components/NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_ORDERS = gql`\n\nquery{\n  pastOrders(index: 0, limit: 100){\n    address{\n    addressLine1\n    }\n    items {\n    name\n    }\n    orderDate\n    total\n    uid\n  }\n}\n`;\n\nconst OrdersScreen = () => {\n  _s();\n\n  const {\n    loading,\n    data\n  } = useQuery(GET_ORDERS);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n      className: \"ordersContainer\",\n      children: data.pastOrders.map(order => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        children: /*#__PURE__*/_jsxDEV(Accordion, {\n          children: [/*#__PURE__*/_jsxDEV(Accordion.Toggle, {\n            style: {\n              width: '100%',\n              display: 'flex',\n              justifyContent: 'space-between'\n            },\n            as: Button,\n            variant: \"link\",\n            eventKey: \"0\",\n            children: [order.orderDate.substr(0, 10), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [order.total, \" $\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Accordion.Collapse, {\n            eventKey: \"0\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Address: \", order.address.addressLine1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 36\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: order.items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 32\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)\n      }, order.uid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(OrdersScreen, \"HasvTXHwlBNedvPpf4Gl00Z2xbw=\", false, function () {\n  return [useQuery];\n});\n\n_c = OrdersScreen;\nexport default OrdersScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrdersScreen\");","map":{"version":3,"sources":["/Users/medmaksi/Restaurant_App/src/screens/OrdersScreen.js"],"names":["React","gql","useQuery","ListGroup","Accordion","Button","NavBar","GET_ORDERS","OrdersScreen","loading","data","pastOrders","map","order","width","display","justifyContent","orderDate","substr","total","address","addressLine1","items","item","name","uid"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAAQC,SAAR,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA2C,iBAA3C;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,UAAU,GAAGN,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;;AAiBA,MAAMO,YAAY,GAAG,MAAM;AAAA;;AAEvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBR,QAAQ,CAACK,UAAD,CAAlC;;AAEA,MAAGE,OAAH,EAAY;AACR,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAED,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,iBAArB;AAAA,gBACKC,IAAI,CAACC,UAAL,CAAgBC,GAAhB,CAAqBC,KAAD,iBACjB,QAAC,SAAD,CAAW,IAAX;AAAA,+BACI,QAAC,SAAD;AAAA,kCACI,QAAC,SAAD,CAAW,MAAX;AAAkB,YAAA,KAAK,EAAE;AAACC,cAAAA,KAAK,EAAE,MAAR;AAAgBC,cAAAA,OAAO,EAAE,MAAzB;AAAiCC,cAAAA,cAAc,EAAE;AAAjD,aAAzB;AAA4F,YAAA,EAAE,EAAEX,MAAhG;AAAwG,YAAA,OAAO,EAAC,MAAhH;AAAuH,YAAA,QAAQ,EAAC,GAAhI;AAAA,uBACKQ,KAAK,CAACI,SAAN,CAAgBC,MAAhB,CAAuB,CAAvB,EAAyB,EAAzB,CADL,eAEI;AAAA,yBACKL,KAAK,CAACM,KADX;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAOI,QAAC,SAAD,CAAW,QAAX;AAAoB,YAAA,QAAQ,EAAC,GAA7B;AAAA,mCACG;AAAA,sCACI;AAAA,wCAAaN,KAAK,CAACO,OAAN,CAAcC,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEK;AAAA,0BACKR,KAAK,CAACS,KAAN,CAAYV,GAAZ,CAAiBW,IAAD,iBACb;AAAA,4BAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,wBADH;AADL;AAAA;AAAA;AAAA;AAAA,sBAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,SAAqBX,KAAK,CAACY,GAA3B;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CAxCD;;GAAMjB,Y;UAEwBN,Q;;;KAFxBM,Y;AA0CN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport { gql, useQuery } from '@apollo/client';\nimport {ListGroup, Accordion, Button} from \"react-bootstrap\";\nimport NavBar from \"../components/NavBar\";\n\nconst GET_ORDERS = gql`\n\nquery{\n  pastOrders(index: 0, limit: 100){\n    address{\n    addressLine1\n    }\n    items {\n    name\n    }\n    orderDate\n    total\n    uid\n  }\n}\n`;\n\nconst OrdersScreen = () => {\n\n    const { loading, data } = useQuery(GET_ORDERS);\n\n    if(loading) {\n        return(\n            <p>Loading...</p>\n        )\n    }\n\n    return(\n        <div>\n            <NavBar/>\n            <ListGroup className=\"ordersContainer\">\n                {data.pastOrders.map((order) => (\n                    <ListGroup.Item key={order.uid}>\n                        <Accordion>\n                            <Accordion.Toggle style={{width: '100%', display: 'flex', justifyContent: 'space-between'}} as={Button} variant=\"link\" eventKey=\"0\">\n                                {order.orderDate.substr(0,10)}\n                                <span>\n                                    {order.total} $\n                                </span>\n                            </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"0\">\n                               <div>\n                                   <p>Address: {order.address.addressLine1}</p>\n                                    <ul>\n                                        {order.items.map((item) => (\n                                            <li>{item.name}</li>\n                                        ))}\n                                    </ul>\n                               </div>\n                            </Accordion.Collapse>\n                        </Accordion>\n                    </ListGroup.Item>\n                ))}\n\n            </ListGroup>\n        </div>\n    )\n}\n\nexport default OrdersScreen;"]},"metadata":{},"sourceType":"module"}